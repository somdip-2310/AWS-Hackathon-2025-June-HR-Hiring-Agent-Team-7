name: Deploy HR Demo to ECS

on:
  push:
    branches: [ main, master ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: somdip-hr-demo
  ECS_SERVICE: somdip-hr-demo-service
  ECS_CLUSTER: somdip-dev-cluster
  ECS_TASK_DEFINITION: somdip-hr-demo
  CONTAINER_NAME: hr-demo

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Create task definition
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cat > task-definition.json << EOF
        {
          "family": "$ECS_TASK_DEFINITION",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "512",
          "memory": "1024",
          "executionRoleArn": "arn:aws:iam::257394460825:role/ecsTaskExecutionRole",
          "taskRoleArn": "arn:aws:iam::257394460825:role/ecsTaskRole",
          "containerDefinitions": [
            {
              "name": "$CONTAINER_NAME",
              "image": "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG",
              "portMappings": [
                {
                  "containerPort": 8081,
                  "protocol": "tcp"
                }
              ],
              "essential": true,
              "environment": [
                {"name": "AWS_REGION", "value": "$AWS_REGION"},
                {"name": "S3_BUCKET_NAME", "value": "hr-hiring-resumes-js"},
                {"name": "BEDROCK_MODEL_ID", "value": "us.amazon.nova-premier-v1:0"},
                {"name": "SPRING_PROFILES_ACTIVE", "value": "prod"},
                {"name": "SERVER_PORT", "value": "8081"},
                {"name": "CORS_ALLOWED_ORIGINS", "value": "https://demos.somdip.dev,https://somdip.dev,https://www.somdip.dev,http://localhost:8080,http://localhost:8081"},
                {"name": "SECURITY_HEADERS_CONTENT_SECURITY_POLICY", "value": "frame-ancestors 'self' https://somdip.dev https://www.somdip.dev http://localhost:8080 http://localhost:8081;"},
                {"name": "JAVA_OPTS", "value": "-XX:MaxRAMPercentage=75.0 -XX:+UseG1GC"},
                {"name": "SENDGRID_ENABLED", "value": "true"},
                {"name": "SENDGRID_FROM_EMAIL", "value": "hr-agent@somdip.dev"},
                {"name": "APPLICATION_URL", "value": "https://demos.somdip.dev/hr-agent"}
              ],
              "secrets": [
                {
                  "name": "SENDGRID_API_KEY",
                  "valueFrom": "arn:aws:secretsmanager:us-east-1:257394460825:secret:sendgrid-api-key:SENDGRID_API_KEY::"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/somdip-hr-demo",
                  "awslogs-region": "$AWS_REGION",
                  "awslogs-stream-prefix": "ecs"
                }
              },
              "healthCheck": {
                "command": ["CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1"],
                "interval": 30,
                "timeout": 5,
                "retries": 3,
                "startPeriod": 120
              }
            }
          ]
        }
        EOF

    - name: Register task definition
      id: task-def
      run: |
        TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://task-definition.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        echo "task-def-arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --task-definition ${{ steps.task-def.outputs.task-def-arn }} \
          --desired-count 2 \
          --deployment-configuration "maximumPercent=100,minimumHealthyPercent=0" \
          --health-check-grace-period-seconds 300 \
          --force-new-deployment

    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to complete..."
        # Wait up to 10 minutes for service to stabilize
        timeout 600 aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          || echo "Service did not stabilize in 10 minutes, checking status..."
        
        echo "Deployment status:"
        aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].[serviceName,runningCount,desiredCount,deployments[0].status]' \
          --output table

    - name: Verify deployment
      run: |
        # Check if service is running
        RUNNING_COUNT=$(aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].runningCount' \
          --output text)
        
        if [ "$RUNNING_COUNT" -gt 0 ]; then
          echo "✅ Deployment successful: $RUNNING_COUNT tasks running"
        else
          echo "❌ Deployment failed: No tasks running"
          exit 1
        fi
        
        # Wait for tasks to be registered in ALB
        echo "Waiting for ALB target registration..."
        sleep 60
        
        # Check ALB target health instead of direct HTTP
        TG_ARN="arn:aws:elasticloadbalancing:us-east-1:257394460825:targetgroup/somdip-dev-hr-demo/5eeb69e7b7f8ba21"
        
        HEALTHY_TARGETS=$(aws elbv2 describe-target-health \
          --target-group-arn $TG_ARN \
          --query 'length(TargetHealthDescriptions[?TargetHealth.State==`healthy`])' \
          --output text)
        
        echo "Healthy targets in ALB: $HEALTHY_TARGETS"
        
        if [ "$HEALTHY_TARGETS" -gt 0 ]; then
          echo "✅ At least one target is healthy in the load balancer"
        else
          echo "❌ No healthy targets in the load balancer"
          # Don't fail the deployment if tasks are running
          echo "Note: Tasks are running but may need more time to become healthy"
        fi
