# .github/workflows/deploy.yml
# Diagnostic workflow for HR Demo Service

name: Deploy HR Demo to AWS ECS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: somdip-hr-demo
  ECS_SERVICE: somdip-hr-demo-service
  ECS_CLUSTER: somdip-dev-cluster
  ECS_TASK_DEFINITION: somdip-hr-demo
  CONTAINER_NAME: hr-demo

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      run: |
        echo "Building HR Demo Application..."
        mvn clean package -DskipTests
        echo "Build completed successfully!"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Check current service status
      run: |
        echo "=== Checking current HR Demo service status ==="
        aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].[status, runningCount, desiredCount, pendingCount]' \
          --output table
        
        echo ""
        echo "=== Recent service events ==="
        aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].events[:5].[createdAt, message]' \
          --output table
        
        echo ""
        echo "=== Load balancer configuration ==="
        aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].loadBalancers[*].[targetGroupArn, containerName, containerPort]' \
          --output table

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build the Docker image
        echo "Building Docker image..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        
        # Push image with commit SHA tag
        echo "Pushing image with SHA tag..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Tag and push as latest
        echo "Tagging and pushing as latest..."
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Output the image URI
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Create and deploy task definition
      run: |
        echo "=== Creating task definition for HR Demo ==="
        
        # Get current task definition
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition-temp.json
        
        # Check container name
        CURRENT_CONTAINER_NAME=$(cat task-definition-temp.json | jq -r '.containerDefinitions[0].name')
        echo "Current container name: $CURRENT_CONTAINER_NAME"
        
        # Get load balancer expected container name
        EXPECTED_CONTAINER_NAME=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].loadBalancers[0].containerName' \
          --output text 2>/dev/null || echo "none")
        echo "Load balancer expects container: $EXPECTED_CONTAINER_NAME"
        
        # Set the container name to match load balancer expectation
        if [ "$EXPECTED_CONTAINER_NAME" != "none" ] && [ "$EXPECTED_CONTAINER_NAME" != "null" ]; then
          CONTAINER_NAME_TO_USE=$EXPECTED_CONTAINER_NAME
        else
          CONTAINER_NAME_TO_USE=${{ env.CONTAINER_NAME }}
        fi
        echo "Using container name: $CONTAINER_NAME_TO_USE"
        
        # Update task definition
        jq --arg CONTAINER_NAME "$CONTAINER_NAME_TO_USE" \
           --arg IMAGE "${{ steps.build-image.outputs.image }}" \
          '.containerDefinitions[0].name = $CONTAINER_NAME | 
           .containerDefinitions[0].image = $IMAGE |
           del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
          task-definition-temp.json > task-definition.json
        
        # Register new task definition
        NEW_TASK_DEF=$(aws ecs register-task-definition \
          --cli-input-json file://task-definition.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        echo "New task definition: $NEW_TASK_DEF"
        
        # Update service with new task definition
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition $NEW_TASK_DEF \
          --force-new-deployment

    - name: Monitor deployment
      run: |
        echo "=== Monitoring deployment progress ==="
        
        # Wait up to 10 minutes, checking status every 30 seconds
        for i in {1..20}; do
          echo "Check $i/20..."
          
          # Get service status
          STATUS=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].deployments[?status==`PRIMARY`].[runningCount, desiredCount]' \
            --output text)
          
          RUNNING=$(echo $STATUS | cut -d' ' -f1)
          DESIRED=$(echo $STATUS | cut -d' ' -f2)
          
          echo "Running: $RUNNING, Desired: $DESIRED"
          
          if [ "$RUNNING" == "$DESIRED" ] && [ "$RUNNING" -gt 0 ]; then
            echo "✅ Deployment successful!"
            break
          fi
          
          # Check for failed tasks
          FAILED_COUNT=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].deployments[?status==`PRIMARY`].failedTasks' \
            --output text)
          
          if [ "$FAILED_COUNT" -gt 0 ]; then
            echo "⚠️  Failed tasks detected: $FAILED_COUNT"
            
            # Get task failure reason
            TASK_ARN=$(aws ecs list-tasks \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service-name ${{ env.ECS_SERVICE }} \
              --desired-status STOPPED \
              --query 'taskArns[0]' \
              --output text)
            
            if [ "$TASK_ARN" != "None" ]; then
              echo "Failed task details:"
              aws ecs describe-tasks \
                --cluster ${{ env.ECS_CLUSTER }} \
                --tasks $TASK_ARN \
                --query 'tasks[0].[stoppedReason, stopCode]' \
                --output table
            fi
          fi
          
          sleep 30
        done
        
        # Final status check
        echo ""
        echo "=== Final deployment status ==="
        aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].deployments[*].[status, desiredCount, runningCount, failedTasks]' \
          --output table

    - name: Get CloudWatch logs if deployment failed
      if: failure()
      run: |
        echo "=== Checking CloudWatch logs for errors ==="
        
        # Get the log group name
        LOG_GROUP="/ecs/somdip-hr-demo"
        
        # Get recent log events
        aws logs filter-log-events \
          --log-group-name $LOG_GROUP \
          --start-time $(($(date +%s) - 600))000 \
          --filter-pattern "ERROR" \
          --max-items 20 \
          --query 'events[*].[timestamp, message]' \
          --output table || echo "No error logs found"

    - name: Create deployment summary
      if: always()
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ **Status**: Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **URL**: https://demos.somdip.dev" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Status**: Deployment Failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Service**: ${{ env.ECS_SERVICE }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Cluster**: ${{ env.ECS_CLUSTER }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Container**: ${{ env.CONTAINER_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: \`${{ steps.build-image.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Time**: $(date)" >> $GITHUB_STEP_SUMMARY
